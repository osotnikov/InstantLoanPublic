<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc 
    	http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
		http://www.springframework.org/schema/beans 
    	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    	http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
 
	<context:component-scan base-package="osotnikov.demo.instantloan" />
 
 	<mvc:annotation-driven />
 	
 	<context:property-placeholder location="classpath:config.properties"/>
 	
 
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	<!-- JNDI, DataSource -->
	
	<!-- jee:jndi-lookup is the Spring way to reference JNDI resources.
	The xmlns:jee="http://www.springframework.org/schema/jee" namespace must be present as well as
	the entries http://www.springframework.org/schema/jee, 
    http://www.springframework.org/schema/jee/spring-jee-2.5.xsd in the xsi:schemaLocation.
	<jee:jndi-lookup id="webDemoDS" jndi-name="java:comp/env/WEB_DEMO" expected-type="oracle.jdbc.xa.client.OracleXADataSource" /> 
	-->
	<!-- Alternatively JNDI resources can be referenced through the JndiObjectFactoryBean, although
	it being a factory it can be exactly in the same way as with the previous example, i.e. the
	factory acts as the bean itself.
	<bean id="webDemoDS" class="org.springframework.jndi.JndiObjectFactoryBean">
	    <property name="jndiName" value="WEB_DEMO"/>
	</bean> -->

	<bean id="webDemoDS"
         class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="WEB_DEMO" />
		<property name="password" value="WEB_DEMO" />
	</bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<bean id="webDemoSessFac"
			class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			
		<property name="dataSource" ref="webDemoDS" />
		<property name="packagesToScan" value="osotnikov.demo.instantloan.dao.entity"/>
		<!-- Alternatively you can define the exact classes one by one. 
		<property name="annotatedClasses">
			<list>
				<value>osotnikov.demo.instantloan.dao.entity.LoanApplication</value>
			</list>
		</property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!-- Automatically create tables from @Entity annotated classes and
				update them when changes happen to these classes. -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<!-- Transaction configuration for Hibernate -->
	<bean id="transactionManager"
	    class="org.springframework.orm.hibernate4.HibernateTransactionManager" 
	    p:sessionFactory-ref="webDemoSessFac">
	</bean>

	
	<!-- <bean id="personDAO" class="com.journaldev.dao.PersonDAOImpl">
		<property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</bean> -->
	
</beans>